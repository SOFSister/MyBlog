(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{754:function(s,a,t){"use strict";t.r(a);var n=t(12),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_1-面向对象和面向过程的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向对象和面向过程的区别"}},[s._v("#")]),s._v(" 1.面向对象和面向过程的区别")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("面向过程")]),s._v(" ："),t("strong",[s._v("面向过程性能比面向对象高。")]),s._v(" 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，"),t("strong",[s._v("面向过程没有面向对象易维护、易复用、易扩展。")])]),s._v(" "),t("li",[t("strong",[s._v("面向对象")]),s._v(" ："),t("strong",[s._v("面向对象易维护、易复用、易扩展。")]),s._v(" 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，"),t("strong",[s._v("面向对象性能比面向过程低")]),s._v("。")])]),s._v(" "),t("blockquote",[t("p",[s._v("这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。")]),s._v(" "),t("p",[s._v("而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。")])]),s._v(" "),t("h2",{attrs:{id:"_2-java语言的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java语言的特点"}},[s._v("#")]),s._v(" 2.Java语言的特点")]),s._v(" "),t("ol",[t("li",[s._v("简单易学；")]),s._v(" "),t("li",[s._v("面向对象（封装，继承，多态）；")]),s._v(" "),t("li",[s._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),s._v(" "),t("li",[s._v("可靠性；")]),s._v(" "),t("li",[s._v("安全性；")]),s._v(" "),t("li",[s._v("支持多线程（ C++ 11前没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；")]),s._v(" "),t("li",[s._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")]),s._v(" "),t("li",[s._v("编译与解释并存；")])]),s._v(" "),t("h2",{attrs:{id:"_3-关于jvm-jdk-和-jre最详细通俗的解答"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-关于jvm-jdk-和-jre最详细通俗的解答"}},[s._v("#")]),s._v(" 3.关于JVM JDK 和 JRE最详细通俗的解答")]),s._v(" "),t("h3",{attrs:{id:"_3-1-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-jvm"}},[s._v("#")]),s._v(" 3.1.JVM")]),s._v(" "),t("p",[s._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。")]),s._v(" "),t("p",[t("strong",[s._v("什么是字节码?采用字节码的好处是什么?")])]),s._v(" "),t("blockquote",[t("p",[s._v("在 Java 中，JVM 可以理解的代码就叫做"),t("code",[s._v("字节码")]),s._v("（即扩展名为 "),t("code",[s._v(".class")]),s._v(" 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")])]),s._v(" "),t("p",[t("strong",[s._v("Java 程序从源代码到运行一般有下面 3 步：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222083701210.png",alt:"image-20220222083701210"}})]),s._v(" "),t("p",[s._v("我们需要格外注意的是 .class->机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。")]),s._v(" "),t("blockquote",[t("p",[s._v("HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。")])]),s._v(" "),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("p",[s._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。")]),s._v(" "),t("h3",{attrs:{id:"_3-2-jdk和jre"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-jdk和jre"}},[s._v("#")]),s._v(" 3.2.JDK和JRE")]),s._v(" "),t("p",[s._v("JDK 是 Java Development Kit，它是功能齐全的 Java SDK（Software Development Kit）。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")]),s._v(" "),t("p",[s._v("JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")]),s._v(" "),t("p",[s._v("如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。")]),s._v(" "),t("h2",{attrs:{id:"_4-oracle-jdk-和-openjdk-的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-oracle-jdk-和-openjdk-的对比"}},[s._v("#")]),s._v(" 4.Oracle JDK 和 OpenJDK 的对比")]),s._v(" "),t("p",[s._v("对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：")]),s._v(" "),t("blockquote",[t("p",[s._v("问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？")]),s._v(" "),t("p",[s._v("答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。")])]),s._v(" "),t("p",[t("strong",[s._v("总结：")])]),s._v(" "),t("ol",[t("li",[s._v("OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；")]),s._v(" "),t("li",[s._v("Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；")]),s._v(" "),t("li",[s._v("在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；")]),s._v(" "),t("li",[s._v("Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；")]),s._v(" "),t("li",[s._v("Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。")])]),s._v(" "),t("h2",{attrs:{id:"_5-java和c-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-java和c-的区别"}},[s._v("#")]),s._v(" 5.Java和C++的区别")]),s._v(" "),t("ul",[t("li",[s._v("都是面向对象的语言，都支持封装、继承和多态")]),s._v(" "),t("li",[s._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),s._v(" "),t("li",[s._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。")]),s._v(" "),t("li",[s._v("Java 有自动内存管理机制，不需要程序员手动释放无用内存")]),s._v(" "),t("li",[t("strong",[s._v("在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\\0’来表示结束。但是，Java 语言中没有结束符这一概念。")])])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("java中无需结束符的原因")])]),s._v(" "),t("p",[s._v("Java里面的一切都是对象，是对象的话，字符串肯定就有长度，既然有长度，编译器就可以确定要输出的字符个数，当然也就没有必要去浪费那1字节的空间用以标明字符串的结束了。比如，数组对象里有一个属性length，就是数组的长度，String类里面有方法length()可以确定字符串的长度，因此对于输出函数来说，有直接的大小可以判断字符串的边界，编译器就没必要再去浪费一个空间标识字符串的结束")])]),s._v(" "),t("h2",{attrs:{id:"_6-字符型常量和字符串常量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-字符型常量和字符串常量的区别"}},[s._v("#")]),s._v(" 6.字符型常量和字符串常量的区别")]),s._v(" "),t("ol",[t("li",[s._v("形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符")]),s._v(" "),t("li",[s._v("含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)")]),s._v(" "),t("li",[s._v("占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 ("),t("strong",[s._v("注意： char 在 Java 中占两个字节")]),s._v(")")])]),s._v(" "),t("blockquote",[t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222091545605.png",alt:"image-20220222091545605"}})])]),s._v(" "),t("h2",{attrs:{id:"_7-构造器constructor是否可被override"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-构造器constructor是否可被override"}},[s._v("#")]),s._v(" 7.构造器Constructor是否可被override")]),s._v(" "),t("p",[s._v("Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。")]),s._v(" "),t("h2",{attrs:{id:"_8-重载和重写的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-重载和重写的区别"}},[s._v("#")]),s._v(" 8.重载和重写的区别")]),s._v(" "),t("blockquote",[t("p",[s._v("重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理")]),s._v(" "),t("p",[s._v("重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法")])]),s._v(" "),t("h3",{attrs:{id:"_8-1重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1重载"}},[s._v("#")]),s._v(" 8.1重载：")]),s._v(" "),t("p",[s._v("发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222092408113.png",alt:"image-20220222092408113"}})]),s._v(" "),t("p",[s._v("**综上：**重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。")]),s._v(" "),t("h3",{attrs:{id:"_8-2重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2重写"}},[s._v("#")]),s._v(" 8.2重写")]),s._v(" "),t("p",[s._v("重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。")]),s._v(" "),t("ol",[t("li",[s._v("返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。")]),s._v(" "),t("li",[s._v("如果父类方法访问修饰符为 "),t("code",[s._v("private/final/static")]),s._v(" 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。")]),s._v(" "),t("li",[s._v("构造方法无法被重写")])]),s._v(" "),t("p",[s._v("⭐️ 关于 "),t("strong",[s._v("重写的返回值类")]),s._v("型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是void和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。")]),s._v(" "),t("p",[s._v("**综上：**重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变")]),s._v(" "),t("h3",{attrs:{id:"_8-3总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-3总结"}},[s._v("#")]),s._v(" 8.3总结")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222093544073.png",alt:"image-20220222093544073"}})]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("方法的重写要遵循“两同两小一大”")])]),s._v(" "),t("ul",[t("li",[s._v("“两同”即方法名相同、形参列表相同；")]),s._v(" "),t("li",[s._v("“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；")]),s._v(" "),t("li",[s._v("“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hero")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"超级英雄"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperMan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hero")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"超人"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hero")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hero")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hero")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperSuperMan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperMan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"超级超级英雄"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperMan")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hero")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SuperMan")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("h2",{attrs:{id:"_9-java面向对象编程三大特性-封装-继承-多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-java面向对象编程三大特性-封装-继承-多态"}},[s._v("#")]),s._v(" 9.Java面向对象编程三大特性：封装 继承 多态")]),s._v(" "),t("h3",{attrs:{id:"_9-1封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1封装"}},[s._v("#")]),s._v(" 9.1封装")]),s._v(" "),t("p",[s._v("封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。")]),s._v(" "),t("h3",{attrs:{id:"_9-2继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2继承"}},[s._v("#")]),s._v(" 9.2继承")]),s._v(" "),t("p",[s._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。")]),s._v(" "),t("p",[t("strong",[s._v("关于继承如下 3 点请记住：")])]),s._v(" "),t("ol",[t("li",[s._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),t("strong",[s._v("只是拥有")]),s._v("。")]),s._v(" "),t("li",[s._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),s._v(" "),t("li",[s._v("子类可以用自己的方式实现父类的方法。")])]),s._v(" "),t("h3",{attrs:{id:"_9-3多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-3多态"}},[s._v("#")]),s._v(" 9.3多态")]),s._v(" "),t("p",[s._v("所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。")]),s._v(" "),t("p",[s._v("在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。")]),s._v(" "),t("h2",{attrs:{id:"_10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[s._v("#")]),s._v(" 10.String StringBuffer 和 StringBuilder 的区别是什么？ String 为什么是不可变的？")]),s._v(" "),t("p",[t("strong",[s._v("可变性")])]),s._v(" "),t("p",[s._v("简单的来说："),t("code",[s._v("String")]),s._v(" 类中使用 "),t("code",[s._v("final")]),s._v(" 关键字修饰字符数组来保存字符串，"),t("code",[s._v("private final char value[]")]),s._v("，所以 String 对象是不可变的。")]),s._v(" "),t("blockquote",[t("p",[s._v("补充：在 Java 9 之后，String 、"),t("code",[s._v("StringBuilder")]),s._v(" 与 "),t("code",[s._v("StringBuffer")]),s._v(" 的实现改用 byte 数组存储字符串 "),t("code",[s._v("private final byte[] value")])])]),s._v(" "),t("p",[s._v("而 "),t("code",[s._v("StringBuilder")]),s._v(" 与 "),t("code",[s._v("StringBuffer")]),s._v(" 都继承自 "),t("code",[s._v("AbstractStringBuilder")]),s._v(" 类，在 "),t("code",[s._v("AbstractStringBuilder")]),s._v(" 中也是使用字符数组保存字符串"),t("code",[s._v("char[]value")]),s._v(" 但是没有用 "),t("code",[s._v("final")]),s._v(" 关键字修饰，所以这两种对象都是可变的。")]),s._v(" "),t("p",[t("strong",[s._v("线程安全性")])]),s._v(" "),t("p",[t("code",[s._v("String")]),s._v(" 中的对象是不可变的，也就可以理解为常量，"),t("strong",[s._v("线程安全")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("AbstractStringBuilder")]),s._v(" 是 "),t("code",[s._v("StringBuilder")]),s._v(" 与 "),t("code",[s._v("StringBuffer")]),s._v(" 的公共父类，定义了一些字符串的基本操作，如 "),t("code",[s._v("expandCapacity")]),s._v("、"),t("code",[s._v("append")]),s._v("、"),t("code",[s._v("insert")]),s._v("、"),t("code",[s._v("indexOf")]),s._v(" 等公共方法。")]),s._v(" "),t("p",[t("code",[s._v("StringBuffer")]),s._v(" 对方法加了同步锁或者对调用的方法加了同步锁，所以是"),t("strong",[s._v("线程安全")]),s._v("的。")]),s._v(" "),t("p",[t("code",[s._v("StringBuilder")]),s._v(" 并没有对方法进行加同步锁，所以是"),t("strong",[s._v("非线程安全")]),s._v("的。")]),s._v(" "),t("p",[t("strong",[s._v("性能")])]),s._v(" "),t("p",[s._v("每次对 "),t("code",[s._v("String")]),s._v(" 类型进行改变的时候，都会生成一个新的 "),t("code",[s._v("String")]),s._v(" 对象，然后将指针指向新的 "),t("code",[s._v("String")]),s._v(" 对象。"),t("code",[s._v("StringBuffer")]),s._v(" 每次都会对 "),t("code",[s._v("StringBuffer")]),s._v(" 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 "),t("code",[s._v("StringBuilder")]),s._v(" 相比使用 "),t("code",[s._v("StringBuffer")]),s._v(" 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。")]),s._v(" "),t("p",[t("strong",[s._v("对于三者使用的总结：")])]),s._v(" "),t("ol",[t("li",[s._v("操作少量的数据: 适用 "),t("code",[s._v("String")])]),s._v(" "),t("li",[s._v("单线程操作字符串缓冲区下操作大量数据: 适用 "),t("code",[s._v("StringBuilder")])]),s._v(" "),t("li",[s._v("多线程操作字符串缓冲区下操作大量数据: 适用 "),t("code",[s._v("StringBuffer")])])]),s._v(" "),t("h2",{attrs:{id:"_11-自动装箱与拆箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-自动装箱与拆箱"}},[s._v("#")]),s._v(" 11.自动装箱与拆箱")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("装箱")]),s._v("：将基本类型用它们对应的引用类型包装起来；")]),s._v(" "),t("li",[t("strong",[s._v("拆箱")]),s._v("：将包装类型转换为基本数据类型；")])]),s._v(" "),t("h2",{attrs:{id:"_12-在一个静态方法内调用一个非静态成员为什么是非法的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-在一个静态方法内调用一个非静态成员为什么是非法的"}},[s._v("#")]),s._v(" 12.在一个静态方法内调用一个非静态成员为什么是非法的？")]),s._v(" "),t("p",[s._v("由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。")]),s._v(" "),t("h2",{attrs:{id:"_13-在java中定义一个不做事且没有参数的构造方法的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-在java中定义一个不做事且没有参数的构造方法的作用"}},[s._v("#")]),s._v(" 13.在java中定义一个不做事且没有参数的构造方法的作用")]),s._v(" "),t("p",[s._v("Java 程序在执行子类的构造方法之前，如果没有用 "),t("code",[s._v("super()")]),s._v("来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 "),t("code",[s._v("super()")]),s._v("来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。")]),s._v(" "),t("h2",{attrs:{id:"_14-接口和抽象类的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-接口和抽象类的区别是什么"}},[s._v("#")]),s._v(" 14.接口和抽象类的区别是什么？")]),s._v(" "),t("ol",[t("li",[s._v("接口的方法默认是 "),t("code",[s._v("public")]),s._v("，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。")]),s._v(" "),t("li",[s._v("接口中除了 "),t("code",[s._v("static")]),s._v("、"),t("code",[s._v("final")]),s._v(" 变量，不能有其他变量，而抽象类中则不一定。")]),s._v(" "),t("li",[s._v("一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 "),t("code",[s._v("extends")]),s._v(" 关键字扩展多个接口。")]),s._v(" "),t("li",[s._v("接口方法默认修饰符是 "),t("code",[s._v("public")]),s._v("，抽象方法可以有 "),t("code",[s._v("public")]),s._v("、"),t("code",[s._v("protected")]),s._v(" 和 "),t("code",[s._v("default")]),s._v(" 这些修饰符（抽象方法就是为了被重写所以不能使用 "),t("code",[s._v("private")]),s._v(" 关键字修饰！）。")]),s._v(" "),t("li",[s._v("从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。")])]),s._v(" "),t("blockquote",[t("p",[s._v("备注：")]),s._v(" "),t("ol",[t("li",[s._v("在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。")]),s._v(" "),t("li",[s._v("jdk9 的接口被允许定义私有方法 。")])])]),s._v(" "),t("p",[s._v("总结一下 jdk7~jdk9 Java 中接口概念的变化：")]),s._v(" "),t("ol",[t("li",[s._v("在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。")]),s._v(" "),t("li",[s._v("jdk 8 的时候接口可以有默认方法和静态方法功能。")]),s._v(" "),t("li",[s._v("Jdk 9 在接口中引入了私有方法和私有静态方法。")])]),s._v(" "),t("h2",{attrs:{id:"_15-成员变量与局部变量的区别有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-成员变量与局部变量的区别有哪些"}},[s._v("#")]),s._v(" 15.成员变量与局部变量的区别有哪些？")]),s._v(" "),t("ol",[t("li",[s._v("从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 "),t("code",[s._v("public")]),s._v(","),t("code",[s._v("private")]),s._v(","),t("code",[s._v("static")]),s._v(" 等修饰符所修饰，而局部变量不能被访问控制修饰符及 "),t("code",[s._v("static")]),s._v(" 所修饰；但是，成员变量和局部变量都能被 "),t("code",[s._v("final")]),s._v(" 所修饰。")]),s._v(" "),t("li",[s._v("从变量在内存中的存储方式来看:如果成员变量是使用"),t("code",[s._v("static")]),s._v("修饰的，那么这个成员变量是属于类的，如果没有使用"),t("code",[s._v("static")]),s._v("修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引用数据类型，那存放的是指向堆内存对象的引用或者是指向常量池中的地址。")]),s._v(" "),t("li",[s._v("从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。")]),s._v(" "),t("li",[s._v("成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 "),t("code",[s._v("final")]),s._v(" 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。")])]),s._v(" "),t("h2",{attrs:{id:"_16-创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[s._v("#")]),s._v(" 16.创建一个对象用什么运算符？对象实体与对象引用有何不同？")]),s._v(" "),t("p",[s._v("new 运算符。")]),s._v(" "),t("p",[s._v("new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。")]),s._v(" "),t("p",[s._v("一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;")]),s._v(" "),t("p",[s._v("一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。")]),s._v(" "),t("h2",{attrs:{id:"_17-什么是方法的返回值-返回值在类的方法里的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是方法的返回值-返回值在类的方法里的作用是什么"}},[s._v("#")]),s._v(" 17.什么是方法的返回值？返回值在类的方法里的作用是什么？")]),s._v(" "),t("p",[s._v("方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！")]),s._v(" "),t("h2",{attrs:{id:"_18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-一个类的构造方法的作用是什么-若一个类没有声明构造方法-该程序能正确执行吗-为什么"}},[s._v("#")]),s._v(" 18.一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？")]),s._v(" "),t("p",[s._v("主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法")]),s._v(" "),t("h2",{attrs:{id:"_19-构造方法有哪些特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-构造方法有哪些特性"}},[s._v("#")]),s._v(" 19.构造方法有哪些特性？")]),s._v(" "),t("ol",[t("li",[s._v("名字与类名相同。")]),s._v(" "),t("li",[s._v("没有返回值，但不能用 void 声明构造函数。")]),s._v(" "),t("li",[s._v("生成类的对象时自动执行，无需调用。")])]),s._v(" "),t("h2",{attrs:{id:"_20-静态方法和实例方法有何不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-静态方法和实例方法有何不同"}},[s._v("#")]),s._v(" 20. 静态方法和实例方法有何不同")]),s._v(" "),t("ol",[t("li",[s._v('在外部调用静态方法时，可以使用"类名.方法名"的方式，也可以使用"对象名.方法名"的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。')]),s._v(" "),t("li",[s._v("静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。")])]),s._v(" "),t("h2",{attrs:{id:"_21-对象的相等与指向他们的引用相等-两者有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-对象的相等与指向他们的引用相等-两者有什么不同"}},[s._v("#")]),s._v(" 21.对象的相等与指向他们的引用相等，两者有什么不同？")]),s._v(" "),t("p",[s._v("对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。")]),s._v(" "),t("h2",{attrs:{id:"_22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"}},[s._v("#")]),s._v(" 22.在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？")]),s._v(" "),t("p",[s._v("帮助子类做初始化工作。")]),s._v(" "),t("h2",{attrs:{id:"_23-与-equals-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-与-equals-重要"}},[s._v("#")]),s._v(" 23.== 与 equals（重要）")]),s._v(" "),t("p",[t("strong",[s._v("==")]),s._v(" : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型 == 比较的是值，引用数据类型==比较的是内存地址)。")]),s._v(" "),t("p",[t("strong",[s._v("equals()")]),s._v(" : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：")]),s._v(" "),t("ul",[t("li",[s._v("情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。")]),s._v(" "),t("li",[s._v("情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。")])]),s._v(" "),t("p",[t("strong",[s._v("举个例子")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" test1 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a 为一个引用")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b为另一个引用,对象的内容一样")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 放在常量池中")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" bb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ab"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从常量池中查找")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("aa "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" bb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aa==bb"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，非同一对象")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a==b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aEQb"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[t("strong",[s._v("说明：")])]),s._v(" "),t("ul",[t("li",[s._v("String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。")]),s._v(" "),t("li",[s._v("当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。")])]),s._v(" "),t("h2",{attrs:{id:"_24-hashcode-与-equals-重要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-hashcode-与-equals-重要"}},[s._v("#")]),s._v(" 24. hashCode 与 equals（重要）")]),s._v(" "),t("p",[s._v("面试官可能会问你：“你重写过 "),t("code",[s._v("hashcode")]),s._v(" 和 "),t("code",[s._v("equals")]),s._v("么，为什么重写 "),t("code",[s._v("equals")]),s._v(" 时必须重写 "),t("code",[s._v("hashCode")]),s._v(" 方法？”")]),s._v(" "),t("p",[t("strong",[s._v("1)hashCode()介绍:")])]),s._v(" "),t("p",[t("code",[s._v("hashCode()")]),s._v(" 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。"),t("code",[s._v("hashCode()")]),s._v("定义在 JDK 的 "),t("code",[s._v("Object")]),s._v(" 类中，这就意味着 Java 中的任何类都包含有 "),t("code",[s._v("hashCode()")]),s._v(" 函数。另外需要注意的是： "),t("code",[s._v("Object")]),s._v(" 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("native")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）")]),s._v(" "),t("p",[t("strong",[s._v("2)为什么要有 hashCode？")])]),s._v(" "),t("p",[s._v("我们以“"),t("code",[s._v("HashSet")]),s._v(" 如何检查重复”为例子来说明为什么要有 hashCode？")]),s._v(" "),t("p",[s._v("当你把对象加入 "),t("code",[s._v("HashSet")]),s._v(" 时，"),t("code",[s._v("HashSet")]),s._v(" 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，"),t("code",[s._v("HashSet")]),s._v(" 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 "),t("code",[s._v("equals()")]),s._v(" 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，"),t("code",[s._v("HashSet")]),s._v(" 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head First Java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。")]),s._v(" "),t("p",[t("strong",[s._v("3)为什么重写 "),t("code",[s._v("equals")]),s._v(" 时必须重写 "),t("code",[s._v("hashCode")]),s._v(" 方法？")])]),s._v(" "),t("p",[s._v("如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。"),t("strong",[s._v("因此，equals 方法被覆盖过，则 "),t("code",[s._v("hashCode")]),s._v(" 方法也必须被覆盖。")])]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("hashCode()")]),s._v("的默认行为是对堆上的对象产生独特值。如果没有重写 "),t("code",[s._v("hashCode()")]),s._v("，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）")])]),s._v(" "),t("p",[t("strong",[s._v("4)为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？")])]),s._v(" "),t("p",[s._v("因为 "),t("code",[s._v("hashCode()")]),s._v(" 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 "),t("code",[s._v("hashCode")]),s._v("。")]),s._v(" "),t("p",[s._v("我们刚刚也提到了 "),t("code",[s._v("HashSet")]),s._v(",如果 "),t("code",[s._v("HashSet")]),s._v(" 在对比的时候，同样的 hashcode 有多个对象，它会使用 "),t("code",[s._v("equals()")]),s._v(" 来判断是否真的相同。也就是说 "),t("code",[s._v("hashcode")]),s._v(" 只是用来缩小查找成本。")]),s._v(" "),t("h2",{attrs:{id:"_25-为什么java中只有值传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-为什么java中只有值传递"}},[s._v("#")]),s._v(" 25.为什么Java中只有值传递？")]),s._v(" "),t("p",[s._v("首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。"),t("strong",[s._v("按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。")]),s._v(" 它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。")]),s._v(" "),t("p",[t("strong",[s._v("Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。")])]),s._v(" "),t("p",[t("strong",[s._v("下面通过 3 个例子来给大家说明")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("example 1")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num1 = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"num2 = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" temp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("结果：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("a = 20\nb = 10\nnum1 = 10\nnum2 = 20\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222135034038.png",alt:"image-20220222135034038"}})]),s._v(" "),t("p",[s._v("在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。")]),s._v(" "),t("p",[t("strong",[s._v("通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 example2.")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("example 2")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("change")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将数组的第一个元素变为0")]),s._v("\n        array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("结果：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1\n0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("解析：")])]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222135404682.png",alt:"image-20220222135404682"}})]),s._v(" "),t("p",[s._v("array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。")]),s._v(" "),t("p",[t("strong",[s._v("通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。")])]),s._v(" "),t("p",[t("strong",[s._v("很多程序设计语言（特别是，C++和 Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为 Java 程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("example 3")])])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO Auto-generated method stub")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小张"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小李"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s1:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s2:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" temp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"y:"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("结果：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("x:小李\ny:小张\ns1:小张\ns2:小李\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("交换之前：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222140107753.png",alt:"image-20220222140107753"}})]),s._v(" "),t("p",[s._v("交换之后：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220222140132426.png",alt:"image-20220222140132426"}})]),s._v(" "),t("p",[s._v("通过上面两张图可以很清晰的看出： "),t("strong",[s._v("方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝")])]),s._v(" "),t("blockquote",[t("p",[s._v("总结")])]),s._v(" "),t("p",[s._v("Java 程序设计语言对对象采用的不是引用调用，实际上，对象引用是按值传递的。")]),s._v(" "),t("p",[s._v("下面再总结一下 Java 中方法参数的使用情况：")]),s._v(" "),t("ul",[t("li",[s._v("一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。")]),s._v(" "),t("li",[s._v("一个方法可以改变一个对象参数的状态。")]),s._v(" "),t("li",[s._v("一个方法不能让对象参数引用一个新的对象。")])]),s._v(" "),t("h2",{attrs:{id:"_26-简述线程、程序、进程的基本概念。以及他们之间关系是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-简述线程、程序、进程的基本概念。以及他们之间关系是什么"}},[s._v("#")]),s._v(" 26.简述线程、程序、进程的基本概念。以及他们之间关系是什么？")]),s._v(" "),t("p",[t("strong",[s._v("线程")]),s._v("与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。")]),s._v(" "),t("p",[t("strong",[s._v("程序")]),s._v("是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。")]),s._v(" "),t("p",[t("strong",[s._v("进程")]),s._v("是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。")]),s._v(" "),t("h2",{attrs:{id:"_27-线程有哪些基本状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-线程有哪些基本状态"}},[s._v("#")]),s._v(" 27.线程有哪些基本状态？")]),s._v(" "),t("p",[s._v("Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220223092624457.png",alt:"image-20220223092624457"}})]),s._v(" "),t("p",[s._v("线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220223114320443.png",alt:"image-20220223114320443"}})]),s._v(" "),t("p",[s._v("由上图可以看出：")]),s._v(" "),t("p",[s._v("线程创建之后它将处于 "),t("strong",[s._v("NEW（新建）")]),s._v(" 状态，调用 "),t("code",[s._v("start()")]),s._v(" 方法后开始运行，线程这时候处于 "),t("strong",[s._v("READY（可运行）")]),s._v(" 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 "),t("strong",[s._v("RUNNING（运行）")]),s._v(" 状态。")]),s._v(" "),t("blockquote",[t("p",[s._v("操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态，所以 Java 系统一般将这两个状态统称为 "),t("strong",[s._v("RUNNABLE（运行中）")]),s._v(" 状态 。")])]),s._v(" "),t("p",[s._v("当线程执行 "),t("code",[s._v("wait()")]),s._v("方法之后，线程进入 **WAITING（等待）**状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 "),t("strong",[s._v("TIME_WAITING(超时等待)")]),s._v(" 状态相当于在等待状态的基础上增加了超时限制，比如通过 "),t("code",[s._v("sleep（long millis）")]),s._v("方法或 "),t("code",[s._v("wait（long millis）")]),s._v("方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 "),t("strong",[s._v("BLOCKED（阻塞）")]),s._v(" 状态。线程在执行 Runnable 的"),t("code",[s._v("run()")]),s._v("方法之后将会进入到 "),t("strong",[s._v("TERMINATED（终止）")]),s._v(" 状态。")]),s._v(" "),t("h2",{attrs:{id:"_28-关于-final-关键字的一些总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-关于-final-关键字的一些总结"}},[s._v("#")]),s._v(" 28.关于 final 关键字的一些总结")]),s._v(" "),t("p",[s._v("final 关键字主要用在三个地方：变量、方法、类。")]),s._v(" "),t("ol",[t("li",[s._v("对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。")]),s._v(" "),t("li",[s._v("当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。")]),s._v(" "),t("li",[s._v("使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。")])]),s._v(" "),t("h2",{attrs:{id:"_29-关于java-lang-class类的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-关于java-lang-class类的理解"}},[s._v("#")]),s._v(" 29.关于java.lang.Class类的理解")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("类的加载过程")]),s._v(" "),t("p",[s._v("程序经过javac.exe命令以后，会生成一个或者多个字节码文件(.class结尾)。")]),s._v(" "),t("p",[s._v("接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中，此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。")])]),s._v(" "),t("li",[t("p",[s._v("换句话说，Class的实例就对应着一个运行时类。")])]),s._v(" "),t("li",[t("p",[s._v("加载到内存中的运行时类，会缓存一定的时间。在此时间之内，我们可以通过不同的方式来获取此运行时类。")])])]),s._v(" "),t("h2",{attrs:{id:"_30-获取class的实例的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-获取class的实例的方式"}},[s._v("#")]),s._v(" 30.获取Class的实例的方式")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("调用运行时类的属性：.class")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("通过运行时类的对象，调用getClass()")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" p1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" p1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("调用Class的静态方法：forName(String classPath)")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.atguigu.java.Person"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("使用类的加载器：ClassLoader")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReflectionTest")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),s._v(" clazz4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.atguigu.java.Person"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"_31-类的加载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-类的加载过程"}},[s._v("#")]),s._v(" 31.类的加载过程")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220322220129245.png",alt:"image-20220322220129245"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220322220452907.png",alt:"image-20220322220452907"}})]),s._v(" "),t("h2",{attrs:{id:"_32-类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-类加载器"}},[s._v("#")]),s._v(" 32.类加载器")]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220322221012346.png",alt:"image-20220322221012346"}})]),s._v(" "),t("p",[t("img",{attrs:{src:"/JavaBasisQuestions.assets/image-20220322221520933.png",alt:"image-20220322221520933"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);